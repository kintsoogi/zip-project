"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useZipUsfmFileInput2 = _interopRequireDefault(require("../../hooks/useZipUsfmFileInput/useZipUsfmFileInput"));
var _useProjectsContext2 = _interopRequireDefault(require("../../hooks/useProjectsContext"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var CreateZipProject = function CreateZipProject(_ref) {
  var onCreate = _ref.onCreate,
    _ref$shouldValidate = _ref.shouldValidate,
    shouldValidate = _ref$shouldValidate === void 0 ? true : _ref$shouldValidate;
  var _useState = (0, _react.useState)(''),
    _useState2 = _slicedToArray(_useState, 2),
    projectName = _useState2[0],
    setProjectName = _useState2[1];
  var _useProjectsContext = (0, _useProjectsContext2["default"])(),
    addProject = _useProjectsContext.addProject;
  var handleZipLoad = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(usfmData, file) {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return addProject(projectName, usfmData);
          case 2:
            onCreate(usfmData);
          case 3:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function handleZipLoad(_x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();
  var _useZipUsfmFileInput = (0, _useZipUsfmFileInput2["default"])(handleZipLoad, shouldValidate),
    status = _useZipUsfmFileInput.status,
    isLoading = _useZipUsfmFileInput.isLoading,
    invalidFileType = _useZipUsfmFileInput.invalidFileType,
    uploadError = _useZipUsfmFileInput.uploadError,
    onChange = _useZipUsfmFileInput.onChange,
    onSubmit = _useZipUsfmFileInput.onSubmit;
  if (isLoading) {
    return /*#__PURE__*/_react["default"].createElement("div", null, "Loading....");
  }
  if (uploadError) {
    return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("h1", null, "An Error occured:"), /*#__PURE__*/_react["default"].createElement("p", null, uploadError.message));
  }
  if (invalidFileType) {
    return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("p", null, "Invalid file upload: ".concat(invalidFileType)));
  }
  if (status === 'UPLOAD_SUCCESS') {
    return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("p", null, "wohoo it worked!"));
  }
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: "open-zip-project"
  }, /*#__PURE__*/_react["default"].createElement("h1", null, "Input zipped USFM files..."), /*#__PURE__*/_react["default"].createElement("form", {
    onSubmit: onSubmit
  }, /*#__PURE__*/_react["default"].createElement("input", {
    "data-cy": "zip-text-input",
    placeholder: "Project Name",
    name: "projectName",
    value: projectName,
    onChange: function onChange(e) {
      setProjectName(e.target.value);
    }
  }), /*#__PURE__*/_react["default"].createElement("input", {
    type: "file",
    accept: ".zip",
    onChange: onChange
  }), /*#__PURE__*/_react["default"].createElement("button", null, "Submit")));
};
CreateZipProject.propTypes = {
  /** Parameters: usfmData | Called when zip file has loaded to act upon usfm data */
  onCreate: _propTypes["default"].func,
  /**  Passed to determine whether or not usfm files within the zip should be validated*/
  shouldValidate: _propTypes["default"].bool
};
var _default = CreateZipProject;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDcmVhdGVaaXBQcm9qZWN0Iiwib25DcmVhdGUiLCJzaG91bGRWYWxpZGF0ZSIsInVzZVN0YXRlIiwicHJvamVjdE5hbWUiLCJzZXRQcm9qZWN0TmFtZSIsInVzZVByb2plY3RzQ29udGV4dCIsImFkZFByb2plY3QiLCJoYW5kbGVaaXBMb2FkIiwidXNmbURhdGEiLCJmaWxlIiwidXNlWmlwVXNmbUZpbGVJbnB1dCIsInN0YXR1cyIsImlzTG9hZGluZyIsImludmFsaWRGaWxlVHlwZSIsInVwbG9hZEVycm9yIiwib25DaGFuZ2UiLCJvblN1Ym1pdCIsIm1lc3NhZ2UiLCJlIiwidGFyZ2V0IiwidmFsdWUiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJmdW5jIiwiYm9vbCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NyZWF0ZVppcFByb2plY3QvQ3JlYXRlWmlwUHJvamVjdC5qc3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmltcG9ydCB1c2VaaXBVc2ZtRmlsZUlucHV0IGZyb20gJy4uLy4uL2hvb2tzL3VzZVppcFVzZm1GaWxlSW5wdXQvdXNlWmlwVXNmbUZpbGVJbnB1dCdcbmltcG9ydCB1c2VQcm9qZWN0c0NvbnRleHQgZnJvbSAnLi4vLi4vaG9va3MvdXNlUHJvamVjdHNDb250ZXh0J1xuXG5jb25zdCBDcmVhdGVaaXBQcm9qZWN0ID0gKHsgb25DcmVhdGUsIHNob3VsZFZhbGlkYXRlID0gdHJ1ZSB9KSA9PiB7XG4gIGNvbnN0IFtwcm9qZWN0TmFtZSwgc2V0UHJvamVjdE5hbWVdID0gdXNlU3RhdGUoJycpXG4gIGNvbnN0IHsgYWRkUHJvamVjdCB9ID0gdXNlUHJvamVjdHNDb250ZXh0KClcblxuICBjb25zdCBoYW5kbGVaaXBMb2FkID0gYXN5bmMgKHVzZm1EYXRhLCBmaWxlKSA9PiB7XG4gICAgYXdhaXQgYWRkUHJvamVjdChwcm9qZWN0TmFtZSwgdXNmbURhdGEpXG4gICAgb25DcmVhdGUodXNmbURhdGEpXG4gIH1cblxuICBjb25zdCB7XG4gICAgc3RhdHVzLFxuICAgIGlzTG9hZGluZyxcbiAgICBpbnZhbGlkRmlsZVR5cGUsXG4gICAgdXBsb2FkRXJyb3IsXG4gICAgb25DaGFuZ2UsXG4gICAgb25TdWJtaXQsXG4gIH0gPSB1c2VaaXBVc2ZtRmlsZUlucHV0KGhhbmRsZVppcExvYWQsIHNob3VsZFZhbGlkYXRlKVxuXG4gIGlmIChpc0xvYWRpbmcpIHtcbiAgICByZXR1cm4gPGRpdj5Mb2FkaW5nLi4uLjwvZGl2PlxuICB9XG5cbiAgaWYgKHVwbG9hZEVycm9yKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxoMT5BbiBFcnJvciBvY2N1cmVkOjwvaDE+XG4gICAgICAgIDxwPnt1cGxvYWRFcnJvci5tZXNzYWdlfTwvcD5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuXG4gIGlmIChpbnZhbGlkRmlsZVR5cGUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPHA+e2BJbnZhbGlkIGZpbGUgdXBsb2FkOiAke2ludmFsaWRGaWxlVHlwZX1gfTwvcD5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuXG4gIGlmIChzdGF0dXMgPT09ICdVUExPQURfU1VDQ0VTUycpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPHA+d29ob28gaXQgd29ya2VkITwvcD5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9J29wZW4temlwLXByb2plY3QnPlxuICAgICAgPGgxPklucHV0IHppcHBlZCBVU0ZNIGZpbGVzLi4uPC9oMT5cbiAgICAgIDxmb3JtIG9uU3VibWl0PXtvblN1Ym1pdH0+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIGRhdGEtY3k9J3ppcC10ZXh0LWlucHV0J1xuICAgICAgICAgIHBsYWNlaG9sZGVyPSdQcm9qZWN0IE5hbWUnXG4gICAgICAgICAgbmFtZT0ncHJvamVjdE5hbWUnXG4gICAgICAgICAgdmFsdWU9e3Byb2plY3ROYW1lfVxuICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHtcbiAgICAgICAgICAgIHNldFByb2plY3ROYW1lKGUudGFyZ2V0LnZhbHVlKVxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICAgIDxpbnB1dCB0eXBlPSdmaWxlJyBhY2NlcHQ9Jy56aXAnIG9uQ2hhbmdlPXtvbkNoYW5nZX0gLz5cbiAgICAgICAgPGJ1dHRvbj5TdWJtaXQ8L2J1dHRvbj5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5DcmVhdGVaaXBQcm9qZWN0LnByb3BUeXBlcyA9IHtcbiAgLyoqIFBhcmFtZXRlcnM6IHVzZm1EYXRhIHwgQ2FsbGVkIHdoZW4gemlwIGZpbGUgaGFzIGxvYWRlZCB0byBhY3QgdXBvbiB1c2ZtIGRhdGEgKi9cbiAgb25DcmVhdGU6IFByb3BUeXBlcy5mdW5jLFxuICAvKiogIFBhc3NlZCB0byBkZXRlcm1pbmUgd2hldGhlciBvciBub3QgdXNmbSBmaWxlcyB3aXRoaW4gdGhlIHppcCBzaG91bGQgYmUgdmFsaWRhdGVkKi9cbiAgc2hvdWxkVmFsaWRhdGU6IFByb3BUeXBlcy5ib29sLFxufVxuXG5leHBvcnQgZGVmYXVsdCBDcmVhdGVaaXBQcm9qZWN0XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUErRDtBQUFBO0FBQUE7QUFBQSwrQ0FIL0Q7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBS0EsSUFBTUEsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFnQixPQUE0QztFQUFBLElBQXRDQyxRQUFRLFFBQVJBLFFBQVE7SUFBQSwyQkFBRUMsY0FBYztJQUFkQSxjQUFjLG9DQUFHLElBQUk7RUFDekQsZ0JBQXNDLElBQUFDLGVBQVEsRUFBQyxFQUFFLENBQUM7SUFBQTtJQUEzQ0MsV0FBVztJQUFFQyxjQUFjO0VBQ2xDLDBCQUF1QixJQUFBQywrQkFBa0IsR0FBRTtJQUFuQ0MsVUFBVSx1QkFBVkEsVUFBVTtFQUVsQixJQUFNQyxhQUFhO0lBQUEsdUVBQUcsaUJBQU9DLFFBQVEsRUFBRUMsSUFBSTtNQUFBO1FBQUE7VUFBQTtZQUFBO1lBQUEsT0FDbkNILFVBQVUsQ0FBQ0gsV0FBVyxFQUFFSyxRQUFRLENBQUM7VUFBQTtZQUN2Q1IsUUFBUSxDQUFDUSxRQUFRLENBQUM7VUFBQTtVQUFBO1lBQUE7UUFBQTtNQUFBO0lBQUEsQ0FDbkI7SUFBQSxnQkFIS0QsYUFBYTtNQUFBO0lBQUE7RUFBQSxHQUdsQjtFQUVELDJCQU9JLElBQUFHLGdDQUFtQixFQUFDSCxhQUFhLEVBQUVOLGNBQWMsQ0FBQztJQU5wRFUsTUFBTSx3QkFBTkEsTUFBTTtJQUNOQyxTQUFTLHdCQUFUQSxTQUFTO0lBQ1RDLGVBQWUsd0JBQWZBLGVBQWU7SUFDZkMsV0FBVyx3QkFBWEEsV0FBVztJQUNYQyxRQUFRLHdCQUFSQSxRQUFRO0lBQ1JDLFFBQVEsd0JBQVJBLFFBQVE7RUFHVixJQUFJSixTQUFTLEVBQUU7SUFDYixvQkFBTyw2Q0FBSyxhQUFXLENBQU07RUFDL0I7RUFFQSxJQUFJRSxXQUFXLEVBQUU7SUFDZixvQkFDRSwwREFDRSw0Q0FBSSxtQkFBaUIsQ0FBSyxlQUMxQiwyQ0FBSUEsV0FBVyxDQUFDRyxPQUFPLENBQUssQ0FDeEI7RUFFVjtFQUVBLElBQUlKLGVBQWUsRUFBRTtJQUNuQixvQkFDRSwwREFDRSwwRUFBNEJBLGVBQWUsRUFBTyxDQUM5QztFQUVWO0VBRUEsSUFBSUYsTUFBTSxLQUFLLGdCQUFnQixFQUFFO0lBQy9CLG9CQUNFLDBEQUNFLDJDQUFHLGtCQUFnQixDQUFJLENBQ25CO0VBRVY7RUFFQSxvQkFDRTtJQUFLLFNBQVMsRUFBQztFQUFrQixnQkFDL0IsNENBQUksNEJBQTBCLENBQUssZUFDbkM7SUFBTSxRQUFRLEVBQUVLO0VBQVMsZ0JBQ3ZCO0lBQ0UsV0FBUSxnQkFBZ0I7SUFDeEIsV0FBVyxFQUFDLGNBQWM7SUFDMUIsSUFBSSxFQUFDLGFBQWE7SUFDbEIsS0FBSyxFQUFFYixXQUFZO0lBQ25CLFFBQVEsRUFBRSxrQkFBQWUsQ0FBQyxFQUFJO01BQ2JkLGNBQWMsQ0FBQ2MsQ0FBQyxDQUFDQyxNQUFNLENBQUNDLEtBQUssQ0FBQztJQUNoQztFQUFFLEVBQ0YsZUFDRjtJQUFPLElBQUksRUFBQyxNQUFNO0lBQUMsTUFBTSxFQUFDLE1BQU07SUFBQyxRQUFRLEVBQUVMO0VBQVMsRUFBRyxlQUN2RCxnREFBUSxRQUFNLENBQVMsQ0FDbEIsQ0FDSDtBQUVWLENBQUM7QUFFRGhCLGdCQUFnQixDQUFDc0IsU0FBUyxHQUFHO0VBQzNCO0VBQ0FyQixRQUFRLEVBQUVzQixxQkFBUyxDQUFDQyxJQUFJO0VBQ3hCO0VBQ0F0QixjQUFjLEVBQUVxQixxQkFBUyxDQUFDRTtBQUM1QixDQUFDO0FBQUEsZUFFY3pCLGdCQUFnQjtBQUFBIn0=